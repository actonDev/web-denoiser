* Getting started
  We're gonna use =Vagrant= for our dev machine (standarize our dev environment) in which we will
  + [ ] instal nginx
  + [ ] install docker
  + [ ] install git

** Creating the vagrant box
   Cause the hardest part is getting started (how do you write the =vagrantfile= ? :P) we run the following
   #+BEGIN_SRC sh
  vagrant init ubuntu/xenial64
   #+END_SRC
   This will create a template vagrantfile with =Ubuntu 16.04 LTS=

   By adjusting the comments etc, we ended up with
   #+BEGIN_SRC ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"
  config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.synced_folder "./data", "/vagrant_data"
  config.vm.provider "virtualbox" do |vb|
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install -y nginx
  SHELL
end

   #+END_SRC

   Now, in our host machine we can open in browser =http://192.168.33.10/= and see the wonderful =Welcome to nginx= page :)

* Docker
  The goal is to put every microservice inside a docker  container.
  Our microservices will be:
  + Front: serving the webpage and managing the file upload
  + redis ? : for managing the communication of the waveforms
  + Waveform peaks generator
  + Denoisier

** Installing docker
  As seen [[https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04][here]]
  #+BEGIN_SRC sh
# add the GPG key for the official Docker repository to the system
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
# Make sure you are about to install from the Docker repo instead of the default Ubuntu 16.04 repo:
apt-cache policy docker-ce
# install it
sudo apt-get install -y docker-ce

  #+END_SRC

  extra: run docker commands without sudo
  #+BEGIN_SRC sh
sudo usermod -aG docker ${USER}
su - ${USER}
id -nG
  #+END_SRC

** installing docker-compose
   #+BEGIN_SRC sh
sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
   #+END_SRC




** Playing with docker
   to end up with proper =RUN= instructions, first u have to test them, right?
   SO start with a simple =Dockerfile=
   #+BEGIN_SRC text
FROM ubuntu:16.04
VOLUME /src
CMD ["/bin/bash"]
   #+END_SRC

   Note: [[https://hub.docker.com/_/ubuntu/][here]] you can see the available tags for the =ubuntu= image (but search for other images as well)

   and run
   + =docker build -t demo .= (tag demo)
   + =docker run -it demo=



** Docker with arch+aur
   #+BEGIN_SRC text
FROM base/archlinux
VOLUME /src
WORKDIR /src
CMD ["/bin/bash"]
   #+END_SRC

   + cp /etc/pacman.conf /etc/pacman.conf.bak
   + (echo '#AUR support'; echo '[archlinuxfr]'; echo 'SigLevel = Never'; echo 'Server = http://repo.archlinux.fr/x86_64'; echo; cat /etc/pacman.conf.bak) > /etc/pacman.conf
   + pacman -Sy yaourt
   + yaourt -Sy audiowaveform --noconfirm
	 #+BEGIN_SRC text
Running makepkg as root is not allowed as it can cause permanent,
catastrophic damage to your system.
	 #+END_SRC

	 

** Docker + npm install

*** Copying method
	One simple solution is what is used in the =audiowaveform= microser vice
	#+BEGIN_SRC text
COPY . /code
WORKDIR /code

RUN npm install
	#+END_SRC
	This will copy the source code in the docker machine, and perform the =npm install= there.
	No volume is used for the code. The ideal solution (in my opinion) to mount the code as a volume, and from inside the docker machine be able to run npm install..

*** TODO Volume method
	see [[https://stackoverflow.com/questions/30043872/docker-compose-node-modules-not-present-in-a-volume-after-npm-install-succeeds][here]]
	so, another method would be to
	#+BEGIN_SRC text
WORKDIR /code
COPY package.json /code/
RUN npm install
	#+END_SRC
	and, in the =docker-compose.yml= have
	#+BEGIN_SRC text
  front:
    build: ./front
    volumes:
      - ./front:/code
      - /code/node_modules
	#+END_SRC
	which will create a data volume to store the =node_modules= content (which can be cached as well I suppose).
	*Note* however that the =node_modules= won't be visible in the host machine

	
* Redis
  #+BEGIN_SRC sh
sudo add-apt-repository -y ppa:chris-lea/redis-server
sudo apt-get update
sudo apt-get install redis-client
  #+END_SRC

* Creating our waveform peaks
  BBC to the rescue! They have the wonderful [[https://github.com/bbc/audiowaveform][audiowaveform]] repository and program

  
** Installation
   As they note on their github
   #+BEGIN_SRC sh
sudo add-apt-repository ppa:chris-needham/ppa
sudo apt-get update
sudo apt-get install audiowaveform
   #+END_SRC
   well, not working 

   + apt-get update
   + apt-get install software-properties-common
   + add-apt-repository ppa:chris-needham/ppa
   + apt-get update
   + apt-get install audiowaveform

   docker run -it -v /vagrant/data/audiowaveform-ubuntu/src:/src demo2
   + audiowaveform -i speech1.wav -o speech1.dat

* Vue
  [[https://vuejsdevelopers.com/2017/09/24/vue-js-single-file-javascript-components/][that]] was useful for getting started actually with sinfle file components

* Debugging node
  let's forward the port 5858 of the node, and
  + sudo docker exec -it data_front_1 /bin/bash
	+ node --inspect-brk=0.0.0.0:5858 server.js

  and on vs code
  #+BEGIN_SRC javascript
    {
      "type": "node",
      "request": "attach",
      "name": "Node front docker",
      "address": "192.168.33.10",
      "port": 5858,
      "localRoot": "${workspaceFolder}/data/front",
      "remoteRoot": "/code/",
      "restart": false,
      "sourceMaps": false,
    },
  #+END_SRC

  Note: the remote root is the path on the docker instance (not vagrant)

* Drag+drop file uploading
  see [[https://css-tricks.com/drag-and-drop-file-uploading/][here]]
