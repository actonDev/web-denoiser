export default {
  template: `
    <div>
    <h2>{{ title }}</h2>
     <canvas :id="id" width="1024" height="256"></canvas>
     <p>{{ message }} {{id}}</p>
     <audio ref="player" controls=controls>
        <source v-bind:src="audioSource">
      </audio>
    </div>
    
  `,
  data() {
    return {
      message: 'Oh hai from the component',
      id: null,
      audioSource: null,
      waveformData: null,
    }
  },
  props: [
    'title'
  ],
  mounted() {
    this.id = this._uid;
    window.addEventListener('resize', this.drawCanvas, false);
  },
  methods: {
    loadWaveformData(data) {
      this.waveformData = data;
      this.drawCanvas();
    },
    drawCanvas() {
      if(!this.waveformData) return;
      var localWaveform = WaveformData.create(this.waveformData);
      var canvas = document.getElementById(this.id),
        context = canvas.getContext('2d');

      canvas.width = this.$el.clientWidth;

      const y = this.interpolateHeight(canvas.height);
      const ctx = canvas.getContext("2d");

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      var xFactor = canvas.width / localWaveform.min.length;

      // min
      ctx.moveTo(0, 0);
      ctx.beginPath();
      localWaveform.min.forEach((val, x) => {
        ctx.lineTo(x * xFactor, val * 0.6 + 128)
      });
      ctx.lineWidth = 1
      ctx.strokeStyle = "rgba(100, 100, 200, 0.5)";
      ctx.stroke();

      // max
      ctx.moveTo(0, 0);
      ctx.beginPath();
      localWaveform.max.forEach((val, x) => {
        ctx.lineTo(x * xFactor, val + 128)
      });
      ctx.lineWidth = 0.8
      ctx.strokeStyle = "rgba(200, 10, 10, 1)";
      ctx.stroke();
    },
    interpolateHeight(total_height) {
      const amplitude = 256;
      return (size) => total_height - ((size + 128) * total_height) / amplitude;
    },
    setAudioSource(audioSource) {
      // console.log("setting source to " + audioSource)
      this.audioSource = audioSource
      this.$refs.player.load()
    },
    setWaveformSource(waveformSource) {
      var xhr = new XMLHttpRequest();
      // .dat file generated by audiowaveform program 
      xhr.responseType = "arraybuffer";
      xhr.open("GET", waveformSource);

      xhr.addEventListener("load", progressEvent => {
        this.loadWaveformData(progressEvent.target.response)
      });

      xhr.send();
    }
  }
}
