export default {
  template: `
    <div>
     <canvas :id="id" width="300" height="100"></canvas>
     <p>{{ message }} {{id}}</p>
     <audio ref="player" controls=controls>
        <source v-bind:src="audioSource">
      </audio>
    </div>
    
  `,
  data() {
    return {
      message: 'Oh hai from the component',
      id: null,
      audioSource: null
    }
  },
  mounted() {
    this.id = this._uid;
    // this.$watch('audioSource', () => {
    //   this.$refs.player.load()
    // })
  },
  methods: {
    loadWaveformData(data) {
      var localWaveform = WaveformData.create(data);
      var canvas = document.getElementById(this.id),
        context = canvas.getContext('2d');

      const y = this.interpolateHeight(canvas.height);
      const ctx = canvas.getContext("2d");

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      ctx.beginPath();

      // from 0 to 100
      localWaveform.min.forEach((val, x) => ctx.lineTo(x + 0.5, y(val) + 0.5));

      // then looping back from 100 to 0
      localWaveform.max.reverse().forEach((val, x) => {
        ctx.lineTo((localWaveform.offset_length - x) + 0.5, y(val) + 0.5);
      });

      ctx.closePath();
      ctx.stroke();
    },
    interpolateHeight(total_height){
      const amplitude = 256;
      return (size) => total_height - ((size + 128) * total_height) / amplitude;
    },
    setAudioSource(audioSource) {
      console.log("setting source to " + audioSource)
      this.audioSource = audioSource
      this.$refs.player.load()
    },
    setWaveformSource(waveformSource) {
      var xhr = new XMLHttpRequest();
      // .dat file generated by audiowaveform program 
      xhr.responseType = "arraybuffer";
      xhr.open("GET", waveformSource);

      xhr.addEventListener("load", progressEvent => {
        this.loadWaveformData(progressEvent.target.response)
      });

      xhr.send();
    }
  }
}
